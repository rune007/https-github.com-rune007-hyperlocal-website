@model HLWebRole.Models.CommunityModel
<script src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.3" type="text/javascript"></script>
<script src="../../Scripts/jquery-1.5.1.js" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="../../Scripts/map-find-location-no-pushpin.js" type="text/javascript"></script>
<script type="text/javascript">
    try {
        var map = null;
        function GetMap() {
            map = new VEMap('theMap');
            map.SetDashboardSize(VEDashboardSize.Small);
            map.LoadMap();
        }
    }
    catch (err) {
        var s = document.querySelector('#system-message'); s.innerHTML = typeof msg == 'string' ? msg : err; s.className = 'error';
    }
</script>
<input id="DrawPolygon" title="Start Drawing Polygon." onclick="createGeometry(VEShapeType.Polygon)"
    type="button" value="Start Drawing Polygon" />
<input id="Reset" onclick="StartAgain();" type="button" value="Clear Map And Start Again" />
<br />
Click LEFT MOUSE BUTTON for each corner of polygon. For the last corner of the polygon
you must click the RIGHT MOUSE BUTTON.
<div id="theMap" style="position: relative; width: 750px; height: 420px; left: 0px;
    top: 0px; border: 1px solid;">
</div>
@Html.HiddenFor(model => model.PolygonWkt)
<script type="text/javascript">
    try {

        /**
        * Declare the Global Variables
        */             
        var shape = null; // the current shape
        var shapeType = null; // the type of the VE shape being created
        var shapePoints = new Array(); // the array of points in the shape

        GetMap();

        var polygonWkt = '@(Model.PolygonWkt)';

        AddPolygonToMap(polygonWkt);


        // Converts the polygon WKT to VEShape and put the shape on the map.
        function AddPolygonToMap(wkt) {
            // This should store objects like: ['12.518405914319676 55.709173951207539', '12.539563178975145 55.707360541320753']
            var wktCoordinatePairs = [];
            // Shall store WKT coordinate sets that looks like this: ['12.518405914319676', '55.709173951207539']
            var wktCoordinateSets = [];
            // Here we will store objects like: 'VELatLong(55.709173951207539, 12.518405914319676)'
            var veLatLongPoints = [];

            // Removing 'POLYGON ((' & '))' from WKT.
            wkt = wkt.replace('POLYGON ((', '');
            wkt = wkt.replace('))', '');

            // Getting an array of wktCoordinatePairs.
            wktCoordinatePairs = wkt.split(',');

            // Iterating through the wktCoordinatePairs
            for (var i = 0; i < wktCoordinatePairs.length; i++) {
                // Splitting each of the wktCoordinatePairs into wktCoordinateSets
                wktCoordinateSets = wktCoordinatePairs[i].trim().split(' ');

                // Storing the VELatLong point in the veLatLongPoints array.
                veLatLongPoints.push(new VELatLong(parseFloat(wktCoordinateSets[1]), parseFloat(wktCoordinateSets[0])));
            }

            // Creating the VEShape polygon.
            var shape = new VEShape(VEShapeType.Polygon, veLatLongPoints);
            map.AddShape(shape);
            shape.HideIcon();
            polygonPoints = shape.GetPoints();
            map.SetMapView(polygonPoints);
        }



        // We use geocoding against Bing Maps Service (uses the script map-find-location-no-pushpin.js) to help user adjust map.
        $("#Address").blur
        (
            function (evt) {
                var address = jQuery.trim($("#Address").val());
                if (address.length < 1)
                    return;
                FindAddressOnMap(address);
            }
        );


        /************************************************* Transforming VEShape polygon to WKT polygon. **************************************************/
        /* I have based this code on a code example I found in the book:
        Atichinson, Alastair, "Beginning Spatial with SQL Server 2008", Apress 2009 USA, p. 125 - p. 128 */
        function createGeometry(shapetype) {
            // Delete all shapes from the map
            map.DeleteAllShapes();
            // Store the type of VEShape we are defining in the global shapeType variable
            shapeType = shapetype;
            // Set the length of the shapePoints array to zero
            shapePoints.length = 0;
            // Attach the addPoint() function to be called every time we click the mouse
            map.AttachEvent("onclick", addPoint);
            // Change the mouse cursor to show we are adding points
            document.getElementById("theMap").childNodes[0].style.cursor = "crosshair";
        }

        function addPoint(e) {
            // Retrieve the pixel position that we clicked
            var pix = new VEPixel(e.mapX, e.mapY);
            // Convert pixel co-ordinates to Latitude and Longitude
            var pos = map.PixelToLatLong(pix);
            // Add these co-ordinates to the array of points for the current shape 
            shapePoints[shapePoints.length] = pos;
            // Handle different geometries 
            switch (shapeType) {
                // We are drawing a VE Pushpin (i.e. a Point)        
                case VEShapeType.Pushpin:
                    // Create a new Pushpin VEShape based on the point defined
                    shape = new VEShape(VEShapeType.Pushpin, shapePoints);
                    shape.HideIcon();
                    // Add the pushpin to the map
                    map.AddShape(shape);
                    break;
                // We are defining a LineString or a Polygon       
                case VEShapeType.Polyline:
                case VEShapeType.Polygon:
                    // If we have only defined two points for the shape
                    if (shapePoints.length == 2) {
                        // Create a new Polyline VEShape based on the points defined
                        shape = new VEShape(VEShapeType.Polyline, shapePoints);
                        shape.HideIcon();
                        // Add the polyline to the map
                        map.AddShape(shape);
                    }
                    // If we have defined more than two points for the shape
                    if (shapePoints.length > 2) {
                        // Delete the old shape from the map
                        map.DeleteShape(shape);
                        // Create a new Polyline or Polygon VEShape based on the points defined
                        shape = new VEShape(shapeType, shapePoints);
                        shape.HideIcon();
                        // Add the shape to the map
                        map.AddShape(shape);
                    }
                    break;
                // If shapeType is any other value          
                default:
                    // Stop calling the addPoint() function on every mouseclick
                    map.DetachEvent("onclick", addPoint);
                    // Throw an error
                    throw ("Unexpected shape type");
            }

            // When we have finished the shape definition
            if (shapeType == VEShapeType.Pushpin || e.rightMouseButton == true) {
                // Stop calling the addPoint() function on every mouseclick
                map.DetachEvent("onclick", addPoint);
                // Change the mouse cursor back to normal
                document.getElementById("theMap").childNodes[0].style.cursor = "";

                if (shape != null) {
                    // Create the WKT representation of this shape
                    var WKT = makeWKT(map.GetShapeByID(shape.GetID()));

                    /* The 3 polygon wkt fields: PolygonWkt, PolygonWktB, PolygonWktC are actually the same field and is the WKT representation of 
                    the polygon that the user is drawing on the map. I had to put it in 3 fields in order to do three kinds of remote validation on the 
                    data: IsPolygonWithinDenmark IsPolygonValid IsPolygonAreaTooBig . */
                    document.getElementById('PolygonWkt').innerText = WKT.toString();
                    $('form').validate().element("#PolygonWkt");
                    document.getElementById('PolygonWktB').innerText = WKT.toString();
                    $('form').validate().element("#PolygonWktB");
                    document.getElementById('PolygonWktC').innerText = WKT.toString();
                    $('form').validate().element("#PolygonWktC");
                    $("#wkt-validation-messages").show();
                }
            }
        }

        function makeWKT(shape) {
            // Define a variable to hold what type of WKT shape we are creating
            var wktShapeType = "";
            // Define the WKT type which corresponds to the VEShapeType we have created
            switch (shape.GetType()) {
                // VEShapeType.Pushpin => WKT POINT       
                case VEShapeType.Pushpin:
                    wktShapeType = 'POINT';
                    break;
                // VEShapeType.Polyline => WKT LINESTRING       
                case VEShapeType.Polyline:
                    wktShapeType = 'LINESTRING';
                    break;
                // VEShapeType.Polygon => WKT POLYGON       
                case VEShapeType.Polygon:
                    wktShapeType = 'POLYGON';
                    break;
                default:
                    throw ("Unexpected shape type");
            }
            // Define a new string to hold the point list
            var pointsString = ""
            // Retrieve an array of points that make up this shape
            var points = shape.GetPoints();
            // Retrieve the co-ordinates of the first point
            pointsString = points[0].Longitude + " " + points[0].Latitude;
            // Loop through remaining points in the object definition
            for (var i = 1; i < points.length; i++) {
                // Append the remaining points, with a comma before each co-ordinate pair
                pointsString += ", " + points[i].Longitude + " " + points[i].Latitude;
            }
            // Build the WKT representation of the shape. 
            var WKT = null
            if (wktShapeType == 'POLYGON')
            // Polygons require double brackets around the points of the exterior ring
                WKT = wktShapeType + "((" + pointsString + "))";
            else
            // Other WKT geometry types have single brackets
                WKT = wktShapeType + "(" + pointsString + ")";
            // Return the final WKT representation
            return WKT;
        }

        function StartAgain() {
            // Delete all shapes from the map
            map.DeleteAllShapes();
            // Reset the cursor to default style
            document.getElementById('theMap').childNodes[0].style.cursor = "";
            // Reset the text
            document.getElementById('PolygonWkt').innerText = '';
            document.getElementById('PolygonWktB').innerText = '';
            document.getElementById('PolygonWktC').innerText = '';
            $("#wkt-validation-messages").hide();
        }
        /********************************************** End Transforming VEShape polygon to WKT polygon. **************************************************/
    }
    catch (err) {
        var s = document.querySelector('#system-message'); s.innerHTML = typeof msg == 'string' ? msg : err; s.className = 'error';
    }
</script>
