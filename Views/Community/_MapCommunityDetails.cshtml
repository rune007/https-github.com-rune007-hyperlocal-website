@model HLWebRole.HLServiceReference.CommunityDto
<script src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=6.3" type="text/javascript"></script>
<script src="../../Scripts/jquery-1.5.1.js" type="text/javascript"></script>
<script type="text/javascript">
    try {
        var map = null;
        function GetMap() {
            map = new VEMap('theMap');
            map.SetDashboardSize(VEDashboardSize.Small);
            map.LoadMap();
        }
    }
    catch (err) {
        var s = document.querySelector('#system-message'); s.innerHTML = typeof msg == 'string' ? msg : err; s.className = 'error';
    }
    //</script>
<div id='theMap' style="position: relative; width: 580px; height: 500px; left: 0px;
    top: 0px; border: 1px solid;">
</div>
@Html.HiddenFor(model => model.PolygonWkt)
<script type="text/javascript">
    try {
        GetMap();

        var polygonWkt = '@(Model.PolygonWkt)';

        AddPolygonToMap(polygonWkt);


        // Converts the polygon WKT to VEShape and put the shape on the map.
        function AddPolygonToMap(wkt) {
            // This should store objects like: ['12.518405914319676 55.709173951207539', '12.539563178975145 55.707360541320753']
            var wktCoordinatePairs = [];
            // Shall store WKT coordinate sets that looks like this: ['12.518405914319676', '55.709173951207539']
            var wktCoordinateSets = [];
            // Here we will store objects like: 'VELatLong(55.709173951207539, 12.518405914319676)'
            var veLatLongPoints = [];

            // Removing 'POLYGON ((' & '))' from WKT.
            wkt = wkt.replace('POLYGON ((', '');
            wkt = wkt.replace('))', '');

            // Getting an array of wktCoordinatePairs.
            wktCoordinatePairs = wkt.split(',');

            // Iterating through the wktCoordinatePairs
            for (var i = 0; i < wktCoordinatePairs.length; i++) {
                // Splitting each of the wktCoordinatePairs into wktCoordinateSets
                wktCoordinateSets = wktCoordinatePairs[i].trim().split(' ');

                // Storing the VELatLong point in the veLatLongPoints array.
                veLatLongPoints.push(new VELatLong(parseFloat(wktCoordinateSets[1]), parseFloat(wktCoordinateSets[0])));
            }

            // Creating the VEShape polygon.
            var shape = new VEShape(VEShapeType.Polygon, veLatLongPoints);
            map.AddShape(shape);
            shape.HideIcon();
            polygonPoints = shape.GetPoints();
            map.SetMapView(polygonPoints);
        }
    }
    catch (err) {
        var s = document.querySelector('#system-message'); s.innerHTML = typeof msg == 'string' ? msg : err; s.className = 'error';
    }
</script>
